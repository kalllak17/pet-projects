"use strict";
const QuestionsList = []; // question category, question number, question text, was already in use?
let category = '';
document.addEventListener('DOMContentLoaded', () => {
    const buttonElement = document.querySelector('button');
    const categoryList = document.getElementById('categoryList');
    fetch('Qlist_2.txt')
        .then((response) => {
            return response.text();
        })
        .then((data) => {
            //add to array
            let i = 0;
            let tempIndex = 0;
            let index = data.indexOf('\n');
            let indexTab = data.indexOf('\t');
            while (index != -1) {
                let tempTuple = [replaceString(data.substring(tempIndex, indexTab)), i++, replaceString(data.substring(indexTab, index)), false];
                tempIndex = index;
                QuestionsList.push(tempTuple);
                index = data.indexOf('\n', index + 1);
                indexTab = data.indexOf('\t', indexTab + 1);
            }
            setCategoryList();
            category = categoryList.options[categoryList.selectedIndex].value;
        })
        .catch(error => {
            console.error('There was a problem with the fetch operation:', error);
        });
    categoryList.addEventListener("change", function () {
        category = categoryList.options[categoryList.selectedIndex].value;
    });
    buttonElement.addEventListener('click', () => {
        let questionP = document.getElementById('questionP');
        questionP.innerHTML = getQuestion()[2];
    }, false);
});
function getQuestion() {
    function getRandomQuestion(filteredArray) {
        return Math.floor(Math.random() * filteredArray.length);
    }
    const filteredArray = QuestionsList.filter((element) => {
        return element[0] === category;
    });
    let qNumber = getRandomQuestion(filteredArray);
    let iterationNumber = 0;
    while (filteredArray[qNumber][3]) { // column 4 is marker
        qNumber = getRandomQuestion(filteredArray);
        iterationNumber++;
        if (iterationNumber > filteredArray.length) {
            break;
        }
    }
    filteredArray[qNumber][3] = true;
    return filteredArray[qNumber];
}
function setCategoryList() {
    let categorySet = new Set(QuestionsList.map((item) => item[0]));
    const categoryList = document.getElementById('categoryList');
    categorySet.forEach((element) => {
        let newListPart = document.createElement('option');
        newListPart.setAttribute('value', `${element}`);
        newListPart.innerText = element;
        categoryList.appendChild(newListPart);
    });
}
function replaceString(originalString) {
    let newString = originalString.replace("\n", '');
    newString = newString.replace("\t", '');
    return newString;
}
//# sourceMappingURL=data:application/json;base64,